jar {
  manifest {
    attributes(
      "Automatic-Module-Name": project.group + '.' + project.name,
      "Implementation-Title": project.group + '.' + project.name,
      "Implementation-Version": version,
      "Implementation-Vendor": "Codeborne")
  }
  from sourceSets.main.output
  from sourceSets.staticFacade.output
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
  from sourceSets.staticFacade.allSource
}

javadoc {
  failOnError = false
  source = sourceSets.main.allJava + sourceSets.staticFacade.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives jar
  archives sourcesJar
  archives javadocJar
}


if (project.hasProperty("signing.keyId")) {
  apply plugin: 'signing'

  signing {
    sign configurations.archives
  }

  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: project.version.endsWith("-SNAPSHOT") ?
          'https://oss.sonatype.org/content/repositories/snapshots/' :
          'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
          authentication(userName: "$sonatypeUsername", password: "$sonatypePassword")
        }

        pom.project {
          name archivesBaseName
          packaging 'jar'
          description 'Selenide = concise API for Selenium WebDriver'
          url 'https://github.com/codeborne/selenide'

          scm {
            url 'scm:git@github.com:codeborne/selenide.git'
            connection 'scm:git@github.com:codeborne/selenide.git'
            developerConnection 'scm:git@github.com:codeborne/selenide.git'
          }

          licenses {
            license {
              name 'MIT'
              url 'https://opensource.org/licenses/MIT'
              distribution 'repo'
            }
          }

          developers {
            developer {
              id 'asolntsev'
              name 'Andrei Solntsev'
            }
            developer {
              id 'BorisOsipov'
              name 'Boris Osipov'
            }
            developer {
              id 'rosolko'
              name 'Aliaksandr Rasolka'
            }
            developer {
              id 'vinogradoff'
              name 'Alexei Vinogradov'
            }
          }
        }

        //mess with the generated pom to set the 'packaging' tag
        pom.withXml { XmlProvider xmlProvider ->
          def xml = xmlProvider.asString()
          def pomXml = new XmlParser().parse(new ByteArrayInputStream(xml.toString().bytes))

          pomXml.version[0] + { packaging('jar') }

          def newXml = new StringWriter()
          def printer = new XmlNodePrinter(new PrintWriter(newXml))
          printer.preserveWhitespace = true
          printer.print(pomXml)
          xml.setLength(0)
          xml.append(newXml.toString())
        }
      }
    }
  }
}
