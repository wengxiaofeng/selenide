<<<<<<< HEAD
buildscript {
  repositories {
    jcenter()
    maven { url 'https://plugins.gradle.org/m2' }
  }
  dependencies {
    classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.11'
    classpath 'de.undercouch:gradle-download-task:3.2.0'
    classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.1'
  }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'de.undercouch.download'

group='com.codeborne'
archivesBaseName = 'selenide'
version='4.5-SNAPSHOT'

[compileJava, compileTestJava]*.options.collect {options -> options.encoding = 'UTF-8'}
[compileJava, compileTestJava]*.options.collect {options -> options.debug = true}
compileJava.options.debugOptions.debugLevel = "source,lines,vars"
sourceCompatibility = 1.8
targetCompatibility = 1.8

defaultTasks 'check', 'test', 'install'

repositories {
  mavenCentral()
}

configurations {
  provided
  compile.extendsFrom provided
}

dependencies {
  compile('org.apache.httpcomponents:httpcore:4.4.6')
  compile('org.seleniumhq.selenium:selenium-java:3.4.0') {
    exclude group: 'org.seleniumhq.selenium', module: 'selenium-android-driver'
    exclude group: 'org.seleniumhq.selenium', module: 'selenium-api'
    exclude group: 'org.seleniumhq.selenium', module: 'selenium-support'
    exclude group: 'org.seleniumhq.selenium', module: 'selenium-remote-driver'
    exclude group: 'org.seleniumhq.selenium', module: 'selenium-iphone-driver'
    exclude group: 'org.seleniumhq.selenium', module: 'selenium-safari-driver'
    exclude group: 'org.webbitserver', module: 'webbit'
    exclude group: 'commons-codec', module: 'commons-codec'
    exclude group: 'cglib', module: 'cglib-nodep'
    exclude group: 'com.google.code.gson', module: 'gson'
    exclude group: 'org.apache.httpcomponents', module: 'httpcore'
    exclude group: 'com.codeborne', module: 'phantomjsdriver'
  }
  compile('org.seleniumhq.selenium:selenium-api:3.4.0')
  compile('org.seleniumhq.selenium:selenium-support:3.4.0')
  compile('org.seleniumhq.selenium:selenium-remote-driver:3.4.0')
  runtime group: 'com.codeborne', name: 'phantomjsdriver', version: '1.4.3', transitive: false
  compile 'com.google.code.gson:gson:2.8.0'
  compile 'com.google.guava:guava:21.0'
  runtime 'commons-codec:commons-codec:1.10'
  provided group: 'org.seleniumhq.selenium', name: 'htmlunit-driver', version: '2.24', transitive: false
  provided group: 'net.sourceforge.htmlunit', name: 'htmlunit', version: '2.24', transitive: false
  testRuntime group: 'net.sourceforge.htmlunit', name: 'htmlunit', version: '2.24', transitive: false
  compile('net.lightbody.bmp:browsermob-core:2.1.4') {
    exclude group: 'net.lightbody.bmp', module: 'littleproxy'
  }
  compile group: 'org.littleshoot', name: 'littleproxy', version: '1.1.2'
  testRuntime group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25', transitive: false

  provided 'junit:junit:4.12'
  provided 'org.testng:testng:6.9.10'
  
  testCompile group: 'org.seleniumhq.selenium', name: 'selenium-server', version: '3.4.0'  
  testCompile 'org.mockito:mockito-core:2.8.9'
  testCompile 'org.eclipse.jetty:jetty-server:9.4.5.v20170502'
  testCompile 'org.eclipse.jetty:jetty-servlet:9.4.5.v20170502'
  testCompile 'commons-fileupload:commons-fileupload:1.3.2'
  
  testCompile 'com.automation-remarks:video-recorder-core:1.4.1'
  testCompile 'com.automation-remarks:video-recorder-junit:1.4.1'
}

task libsProd(type: Sync) {
  from configurations.compile
  from configurations.runtime
  into "$buildDir/lib-prod"
}

task libsTest(type: Sync) {
  from configurations.testRuntime
  into "$buildDir/lib-test"
}

compileJava.dependsOn libsProd, libsTest

findbugs {
  toolVersion = "3.0.1"
  sourceSets = [sourceSets.main]
  effort = "max"
  reportsDir = file("$project.buildDir/reports/findbugs")
  excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
}

tasks.withType(FindBugs) {
  reports {
    xml.enabled = true
    html.enabled = false
  }
}

task checkstyleHtmlMain {
  doLast {
    ant.xslt(in: checkstyleMain.reports.xml.destination,
      style: file('config/checkstyle/checkstyle-noframes-sorted.xsl'),
      out: new File(checkstyleMain.reports.xml.destination.parent, 'main.html'))
  }
}

task checkstyleHtmlTest {
  doLast {
    ant.xslt(in: checkstyleTest.reports.xml.destination,
      style: file('config/checkstyle/checkstyle-noframes-sorted.xsl'),
      out: new File(checkstyleTest.reports.xml.destination.parent, 'test.html'))
  }
}

checkstyleMain.finalizedBy checkstyleHtmlMain
checkstyleTest.finalizedBy checkstyleHtmlTest

jacoco {
  toolVersion = "0.7.9"
}

jacocoTestReport {
  reports {
    xml.enabled true
    csv.enabled false
    html.enabled true
    html.destination "${buildDir}/reports/jacocoHtml"
  }
  executionData = files(
    file("$project.buildDir/jacoco/test.exec"), 
    file("$project.buildDir/jacoco/htmlunit.exec"),
    file("$project.buildDir/jacoco/chrome.exec")
  )
}

coveralls {
  jacocoReportPath = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
}
=======
import java.nio.charset.StandardCharsets
>>>>>>> upstream/master

plugins {
  id 'java-library'
  id 'idea'
  id 'maven'
  id 'jacoco'
  id 'checkstyle'
  id 'com.github.spotbugs' version '1.6.6'
  id 'org.sonarqube' version '2.6.2'
}

group = 'com.codeborne'
archivesBaseName = 'selenide'
version = '5.2.2'

ext {
  encoding = StandardCharsets.UTF_8.name()
}

tasks.withType(JavaCompile) {
  options.encoding = encoding
  options.debug = true
}
compileJava.options.debugOptions.debugLevel = "source,lines,vars"

sourceCompatibility = JavaVersion.VERSION_1_8

defaultTasks 'check', 'test', 'install'

apply from: rootProject.file('gradle/source-sets.gradle')
apply from: rootProject.file('gradle/dependencies.gradle')
apply from: rootProject.file('gradle/code-analysis.gradle')
apply from: rootProject.file('gradle/coverage.gradle')
apply from: rootProject.file('gradle/tests.gradle')
apply from: rootProject.file('gradle/deploy.gradle')
